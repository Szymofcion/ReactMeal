{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\nconst {\n  CoverageSummary\n} = require('./coverage-summary');\n\n// returns a data object that represents empty coverage\nfunction emptyCoverage(filePath, reportLogic) {\n  const cov = {\n    path: filePath,\n    statementMap: {},\n    fnMap: {},\n    branchMap: {},\n    s: {},\n    f: {},\n    b: {}\n  };\n  if (reportLogic) cov.bT = {};\n  return cov;\n}\n\n// asserts that a data object \"looks like\" a coverage object\nfunction assertValidObject(obj) {\n  const valid = obj && obj.path && obj.statementMap && obj.fnMap && obj.branchMap && obj.s && obj.f && obj.b;\n  if (!valid) {\n    throw new Error('Invalid file coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\nconst keyFromLoc = _ref => {\n  let {\n    start,\n    end\n  } = _ref;\n  return `${start.line}|${start.column}|${end.line}|${end.column}`;\n};\nconst mergeProp = function (aHits, aMap, bHits, bMap) {\n  let itemKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : keyFromLoc;\n  const aItems = {};\n  for (const [key, itemHits] of Object.entries(aHits)) {\n    const item = aMap[key];\n    aItems[itemKey(item)] = [itemHits, item];\n  }\n  for (const [key, bItemHits] of Object.entries(bHits)) {\n    const bItem = bMap[key];\n    const k = itemKey(bItem);\n    if (aItems[k]) {\n      const aPair = aItems[k];\n      if (bItemHits.forEach) {\n        // should this throw an exception if aPair[0] is not an array?\n        bItemHits.forEach((hits, h) => {\n          if (aPair[0][h] !== undefined) aPair[0][h] += hits;else aPair[0][h] = hits;\n        });\n      } else {\n        aPair[0] += bItemHits;\n      }\n    } else {\n      aItems[k] = [bItemHits, bItem];\n    }\n  }\n  const hits = {};\n  const map = {};\n  Object.values(aItems).forEach((_ref2, i) => {\n    let [itemHits, item] = _ref2;\n    hits[i] = itemHits;\n    map[i] = item;\n  });\n  return [hits, map];\n};\n\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n */\nclass FileCoverage {\n  /**\n   * @constructor\n   * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n   * and empty coverage object with the specified file path or a data object that\n   * has all the required properties for a file coverage object.\n   */\n  constructor(pathOrObj) {\n    let reportLogic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!pathOrObj) {\n      throw new Error('Coverage must be initialized with a path or an object');\n    }\n    if (typeof pathOrObj === 'string') {\n      this.data = emptyCoverage(pathOrObj, reportLogic);\n    } else if (pathOrObj instanceof FileCoverage) {\n      this.data = pathOrObj.data;\n    } else if (typeof pathOrObj === 'object') {\n      this.data = pathOrObj;\n    } else {\n      throw new Error('Invalid argument to coverage constructor');\n    }\n    assertValidObject(this.data);\n  }\n\n  /**\n   * returns computed line coverage from statement coverage.\n   * This is a map of hits keyed by line number in the source.\n   */\n  getLineCoverage() {\n    const statementMap = this.data.statementMap;\n    const statements = this.data.s;\n    const lineMap = Object.create(null);\n    Object.entries(statements).forEach(_ref3 => {\n      let [st, count] = _ref3;\n      /* istanbul ignore if: is this even possible? */\n      if (!statementMap[st]) {\n        return;\n      }\n      const {\n        line\n      } = statementMap[st].start;\n      const prevVal = lineMap[line];\n      if (prevVal === undefined || prevVal < count) {\n        lineMap[line] = count;\n      }\n    });\n    return lineMap;\n  }\n\n  /**\n   * returns an array of uncovered line numbers.\n   * @returns {Array} an array of line numbers for which no hits have been\n   *  collected.\n   */\n  getUncoveredLines() {\n    const lc = this.getLineCoverage();\n    const ret = [];\n    Object.entries(lc).forEach(_ref4 => {\n      let [l, hits] = _ref4;\n      if (hits === 0) {\n        ret.push(l);\n      }\n    });\n    return ret;\n  }\n\n  /**\n   * returns a map of branch coverage by source line number.\n   * @returns {Object} an object keyed by line number. Each object\n   * has a `covered`, `total` and `coverage` (percentage) property.\n   */\n  getBranchCoverageByLine() {\n    const branchMap = this.branchMap;\n    const branches = this.b;\n    const ret = {};\n    Object.entries(branchMap).forEach(_ref5 => {\n      let [k, map] = _ref5;\n      const line = map.line || map.loc.start.line;\n      const branchData = branches[k];\n      ret[line] = ret[line] || [];\n      ret[line].push(...branchData);\n    });\n    Object.entries(ret).forEach(_ref6 => {\n      let [k, dataArray] = _ref6;\n      const covered = dataArray.filter(item => item > 0);\n      const coverage = covered.length / dataArray.length * 100;\n      ret[k] = {\n        covered: covered.length,\n        total: dataArray.length,\n        coverage\n      };\n    });\n    return ret;\n  }\n\n  /**\n   * return a JSON-serializable POJO for this file coverage object\n   */\n  toJSON() {\n    return this.data;\n  }\n\n  /**\n   * merges a second coverage object into this one, updating hit counts\n   * @param {FileCoverage} other - the coverage object to be merged into this one.\n   *  Note that the other object should have the same structure as this one (same file).\n   */\n  merge(other) {\n    if (other.all === true) {\n      return;\n    }\n    if (this.all === true) {\n      this.data = other.data;\n      return;\n    }\n    let [hits, map] = mergeProp(this.s, this.statementMap, other.s, other.statementMap);\n    this.data.s = hits;\n    this.data.statementMap = map;\n    const keyFromLocProp = x => keyFromLoc(x.loc);\n    const keyFromLocationsProp = x => keyFromLoc(x.locations[0]);\n    [hits, map] = mergeProp(this.f, this.fnMap, other.f, other.fnMap, keyFromLocProp);\n    this.data.f = hits;\n    this.data.fnMap = map;\n    [hits, map] = mergeProp(this.b, this.branchMap, other.b, other.branchMap, keyFromLocationsProp);\n    this.data.b = hits;\n    this.data.branchMap = map;\n\n    // Tracking additional information about branch truthiness\n    // can be optionally enabled:\n    if (this.bT && other.bT) {\n      [hits, map] = mergeProp(this.bT, this.branchMap, other.bT, other.branchMap, keyFromLocationsProp);\n      this.data.bT = hits;\n    }\n  }\n  computeSimpleTotals(property) {\n    let stats = this[property];\n    if (typeof stats === 'function') {\n      stats = stats.call(this);\n    }\n    const ret = {\n      total: Object.keys(stats).length,\n      covered: Object.values(stats).filter(v => !!v).length,\n      skipped: 0\n    };\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n  }\n  computeBranchTotals(property) {\n    const stats = this[property];\n    const ret = {\n      total: 0,\n      covered: 0,\n      skipped: 0\n    };\n    Object.values(stats).forEach(branches => {\n      ret.covered += branches.filter(hits => hits > 0).length;\n      ret.total += branches.length;\n    });\n    ret.pct = percent(ret.covered, ret.total);\n    return ret;\n  }\n\n  /**\n   * resets hit counts for all statements, functions and branches\n   * in this coverage object resulting in zero coverage.\n   */\n  resetHits() {\n    const statements = this.s;\n    const functions = this.f;\n    const branches = this.b;\n    const branchesTrue = this.bT;\n    Object.keys(statements).forEach(s => {\n      statements[s] = 0;\n    });\n    Object.keys(functions).forEach(f => {\n      functions[f] = 0;\n    });\n    Object.keys(branches).forEach(b => {\n      branches[b].fill(0);\n    });\n    // Tracking additional information about branch truthiness\n    // can be optionally enabled:\n    if (branchesTrue) {\n      Object.keys(branchesTrue).forEach(bT => {\n        branchesTrue[bT].fill(0);\n      });\n    }\n  }\n\n  /**\n   * returns a CoverageSummary for this file coverage object\n   * @returns {CoverageSummary}\n   */\n  toSummary() {\n    const ret = {};\n    ret.lines = this.computeSimpleTotals('getLineCoverage');\n    ret.functions = this.computeSimpleTotals('f', 'fnMap');\n    ret.statements = this.computeSimpleTotals('s', 'statementMap');\n    ret.branches = this.computeBranchTotals('b');\n    // Tracking additional information about branch truthiness\n    // can be optionally enabled:\n    if (this['bt']) {\n      ret.branchesTrue = this.computeBranchTotals('bT');\n    }\n    return new CoverageSummary(ret);\n  }\n}\n\n// expose coverage data attributes\ndataProperties(FileCoverage, ['path', 'statementMap', 'fnMap', 'branchMap', 's', 'f', 'b', 'bT', 'all']);\nmodule.exports = {\n  FileCoverage\n};","map":{"version":3,"names":["percent","require","dataProperties","CoverageSummary","emptyCoverage","filePath","reportLogic","cov","path","statementMap","fnMap","branchMap","s","f","b","bT","assertValidObject","obj","valid","Error","Object","keys","join","keyFromLoc","start","end","line","column","mergeProp","aHits","aMap","bHits","bMap","itemKey","aItems","key","itemHits","entries","item","bItemHits","bItem","k","aPair","forEach","hits","h","undefined","map","values","i","FileCoverage","constructor","pathOrObj","data","getLineCoverage","statements","lineMap","create","st","count","prevVal","getUncoveredLines","lc","ret","l","push","getBranchCoverageByLine","branches","loc","branchData","dataArray","covered","filter","coverage","length","total","toJSON","merge","other","all","keyFromLocProp","x","keyFromLocationsProp","locations","computeSimpleTotals","property","stats","call","v","skipped","pct","computeBranchTotals","resetHits","functions","branchesTrue","fill","toSummary","lines","module","exports"],"sources":["C:/Users/szymo/OneDrive/Pulpit/Programowanie/Kurs tworzenia stron/NewReact/ReactMeals/node_modules/istanbul-lib-coverage/lib/file-coverage.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\nconst { CoverageSummary } = require('./coverage-summary');\n\n// returns a data object that represents empty coverage\nfunction emptyCoverage(filePath, reportLogic) {\n    const cov = {\n        path: filePath,\n        statementMap: {},\n        fnMap: {},\n        branchMap: {},\n        s: {},\n        f: {},\n        b: {}\n    };\n    if (reportLogic) cov.bT = {};\n    return cov;\n}\n\n// asserts that a data object \"looks like\" a coverage object\nfunction assertValidObject(obj) {\n    const valid =\n        obj &&\n        obj.path &&\n        obj.statementMap &&\n        obj.fnMap &&\n        obj.branchMap &&\n        obj.s &&\n        obj.f &&\n        obj.b;\n    if (!valid) {\n        throw new Error(\n            'Invalid file coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n\nconst keyFromLoc = ({ start, end }) =>\n    `${start.line}|${start.column}|${end.line}|${end.column}`;\n\nconst mergeProp = (aHits, aMap, bHits, bMap, itemKey = keyFromLoc) => {\n    const aItems = {};\n    for (const [key, itemHits] of Object.entries(aHits)) {\n        const item = aMap[key];\n        aItems[itemKey(item)] = [itemHits, item];\n    }\n    for (const [key, bItemHits] of Object.entries(bHits)) {\n        const bItem = bMap[key];\n        const k = itemKey(bItem);\n\n        if (aItems[k]) {\n            const aPair = aItems[k];\n            if (bItemHits.forEach) {\n                // should this throw an exception if aPair[0] is not an array?\n                bItemHits.forEach((hits, h) => {\n                    if (aPair[0][h] !== undefined) aPair[0][h] += hits;\n                    else aPair[0][h] = hits;\n                });\n            } else {\n                aPair[0] += bItemHits;\n            }\n        } else {\n            aItems[k] = [bItemHits, bItem];\n        }\n    }\n    const hits = {};\n    const map = {};\n\n    Object.values(aItems).forEach(([itemHits, item], i) => {\n        hits[i] = itemHits;\n        map[i] = item;\n    });\n\n    return [hits, map];\n};\n\n/**\n * provides a read-only view of coverage for a single file.\n * The deep structure of this object is documented elsewhere. It has the following\n * properties:\n *\n * * `path` - the file path for which coverage is being tracked\n * * `statementMap` - map of statement locations keyed by statement index\n * * `fnMap` - map of function metadata keyed by function index\n * * `branchMap` - map of branch metadata keyed by branch index\n * * `s` - hit counts for statements\n * * `f` - hit count for functions\n * * `b` - hit count for branches\n */\nclass FileCoverage {\n    /**\n     * @constructor\n     * @param {Object|FileCoverage|String} pathOrObj is a string that initializes\n     * and empty coverage object with the specified file path or a data object that\n     * has all the required properties for a file coverage object.\n     */\n    constructor(pathOrObj, reportLogic = false) {\n        if (!pathOrObj) {\n            throw new Error(\n                'Coverage must be initialized with a path or an object'\n            );\n        }\n        if (typeof pathOrObj === 'string') {\n            this.data = emptyCoverage(pathOrObj, reportLogic);\n        } else if (pathOrObj instanceof FileCoverage) {\n            this.data = pathOrObj.data;\n        } else if (typeof pathOrObj === 'object') {\n            this.data = pathOrObj;\n        } else {\n            throw new Error('Invalid argument to coverage constructor');\n        }\n        assertValidObject(this.data);\n    }\n\n    /**\n     * returns computed line coverage from statement coverage.\n     * This is a map of hits keyed by line number in the source.\n     */\n    getLineCoverage() {\n        const statementMap = this.data.statementMap;\n        const statements = this.data.s;\n        const lineMap = Object.create(null);\n\n        Object.entries(statements).forEach(([st, count]) => {\n            /* istanbul ignore if: is this even possible? */\n            if (!statementMap[st]) {\n                return;\n            }\n            const { line } = statementMap[st].start;\n            const prevVal = lineMap[line];\n            if (prevVal === undefined || prevVal < count) {\n                lineMap[line] = count;\n            }\n        });\n        return lineMap;\n    }\n\n    /**\n     * returns an array of uncovered line numbers.\n     * @returns {Array} an array of line numbers for which no hits have been\n     *  collected.\n     */\n    getUncoveredLines() {\n        const lc = this.getLineCoverage();\n        const ret = [];\n        Object.entries(lc).forEach(([l, hits]) => {\n            if (hits === 0) {\n                ret.push(l);\n            }\n        });\n        return ret;\n    }\n\n    /**\n     * returns a map of branch coverage by source line number.\n     * @returns {Object} an object keyed by line number. Each object\n     * has a `covered`, `total` and `coverage` (percentage) property.\n     */\n    getBranchCoverageByLine() {\n        const branchMap = this.branchMap;\n        const branches = this.b;\n        const ret = {};\n        Object.entries(branchMap).forEach(([k, map]) => {\n            const line = map.line || map.loc.start.line;\n            const branchData = branches[k];\n            ret[line] = ret[line] || [];\n            ret[line].push(...branchData);\n        });\n        Object.entries(ret).forEach(([k, dataArray]) => {\n            const covered = dataArray.filter(item => item > 0);\n            const coverage = (covered.length / dataArray.length) * 100;\n            ret[k] = {\n                covered: covered.length,\n                total: dataArray.length,\n                coverage\n            };\n        });\n        return ret;\n    }\n\n    /**\n     * return a JSON-serializable POJO for this file coverage object\n     */\n    toJSON() {\n        return this.data;\n    }\n\n    /**\n     * merges a second coverage object into this one, updating hit counts\n     * @param {FileCoverage} other - the coverage object to be merged into this one.\n     *  Note that the other object should have the same structure as this one (same file).\n     */\n    merge(other) {\n        if (other.all === true) {\n            return;\n        }\n\n        if (this.all === true) {\n            this.data = other.data;\n            return;\n        }\n\n        let [hits, map] = mergeProp(\n            this.s,\n            this.statementMap,\n            other.s,\n            other.statementMap\n        );\n        this.data.s = hits;\n        this.data.statementMap = map;\n\n        const keyFromLocProp = x => keyFromLoc(x.loc);\n        const keyFromLocationsProp = x => keyFromLoc(x.locations[0]);\n\n        [hits, map] = mergeProp(\n            this.f,\n            this.fnMap,\n            other.f,\n            other.fnMap,\n            keyFromLocProp\n        );\n        this.data.f = hits;\n        this.data.fnMap = map;\n\n        [hits, map] = mergeProp(\n            this.b,\n            this.branchMap,\n            other.b,\n            other.branchMap,\n            keyFromLocationsProp\n        );\n        this.data.b = hits;\n        this.data.branchMap = map;\n\n        // Tracking additional information about branch truthiness\n        // can be optionally enabled:\n        if (this.bT && other.bT) {\n            [hits, map] = mergeProp(\n                this.bT,\n                this.branchMap,\n                other.bT,\n                other.branchMap,\n                keyFromLocationsProp\n            );\n            this.data.bT = hits;\n        }\n    }\n\n    computeSimpleTotals(property) {\n        let stats = this[property];\n\n        if (typeof stats === 'function') {\n            stats = stats.call(this);\n        }\n\n        const ret = {\n            total: Object.keys(stats).length,\n            covered: Object.values(stats).filter(v => !!v).length,\n            skipped: 0\n        };\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    computeBranchTotals(property) {\n        const stats = this[property];\n        const ret = { total: 0, covered: 0, skipped: 0 };\n\n        Object.values(stats).forEach(branches => {\n            ret.covered += branches.filter(hits => hits > 0).length;\n            ret.total += branches.length;\n        });\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    /**\n     * resets hit counts for all statements, functions and branches\n     * in this coverage object resulting in zero coverage.\n     */\n    resetHits() {\n        const statements = this.s;\n        const functions = this.f;\n        const branches = this.b;\n        const branchesTrue = this.bT;\n        Object.keys(statements).forEach(s => {\n            statements[s] = 0;\n        });\n        Object.keys(functions).forEach(f => {\n            functions[f] = 0;\n        });\n        Object.keys(branches).forEach(b => {\n            branches[b].fill(0);\n        });\n        // Tracking additional information about branch truthiness\n        // can be optionally enabled:\n        if (branchesTrue) {\n            Object.keys(branchesTrue).forEach(bT => {\n                branchesTrue[bT].fill(0);\n            });\n        }\n    }\n\n    /**\n     * returns a CoverageSummary for this file coverage object\n     * @returns {CoverageSummary}\n     */\n    toSummary() {\n        const ret = {};\n        ret.lines = this.computeSimpleTotals('getLineCoverage');\n        ret.functions = this.computeSimpleTotals('f', 'fnMap');\n        ret.statements = this.computeSimpleTotals('s', 'statementMap');\n        ret.branches = this.computeBranchTotals('b');\n        // Tracking additional information about branch truthiness\n        // can be optionally enabled:\n        if (this['bt']) {\n            ret.branchesTrue = this.computeBranchTotals('bT');\n        }\n        return new CoverageSummary(ret);\n    }\n}\n\n// expose coverage data attributes\ndataProperties(FileCoverage, [\n    'path',\n    'statementMap',\n    'fnMap',\n    'branchMap',\n    's',\n    'f',\n    'b',\n    'bT',\n    'all'\n]);\n\nmodule.exports = {\n    FileCoverage\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\nfunction blankSummary() {\n  const empty = () => ({\n    total: 0,\n    covered: 0,\n    skipped: 0,\n    pct: 'Unknown'\n  });\n  return {\n    lines: empty(),\n    statements: empty(),\n    functions: empty(),\n    branches: empty(),\n    branchesTrue: empty()\n  };\n}\n\n// asserts that a data object \"looks like\" a summary coverage object\nfunction assertValidSummary(obj) {\n  const valid = obj && obj.lines && obj.statements && obj.functions && obj.branches;\n  if (!valid) {\n    throw new Error('Invalid summary coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n */\nclass CoverageSummary {\n  /**\n   * @constructor\n   * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n   * another coverage summary to initialize this object with.\n   */\n  constructor(obj) {\n    if (!obj) {\n      this.data = blankSummary();\n    } else if (obj instanceof CoverageSummary) {\n      this.data = obj.data;\n    } else {\n      this.data = obj;\n    }\n    assertValidSummary(this.data);\n  }\n\n  /**\n   * merges a second summary coverage object into this one\n   * @param {CoverageSummary} obj - another coverage summary object\n   */\n  merge(obj) {\n    const keys = ['lines', 'statements', 'branches', 'functions', 'branchesTrue'];\n    keys.forEach(key => {\n      if (obj[key]) {\n        this[key].total += obj[key].total;\n        this[key].covered += obj[key].covered;\n        this[key].skipped += obj[key].skipped;\n        this[key].pct = percent(this[key].covered, this[key].total);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * returns a POJO that is JSON serializable. May be used to get the raw\n   * summary object.\n   */\n  toJSON() {\n    return this.data;\n  }\n\n  /**\n   * return true if summary has no lines of code\n   */\n  isEmpty() {\n    return this.lines.total === 0;\n  }\n}\ndataProperties(CoverageSummary, ['lines', 'statements', 'functions', 'branches', 'branchesTrue']);\nmodule.exports = {\n  CoverageSummary\n};","map":{"version":3,"names":["percent","require","dataProperties","blankSummary","empty","total","covered","skipped","pct","lines","statements","functions","branches","branchesTrue","assertValidSummary","obj","valid","Error","Object","keys","join","CoverageSummary","constructor","data","merge","forEach","key","toJSON","isEmpty","module","exports"],"sources":["C:/Users/szymo/OneDrive/Pulpit/Programowanie/Kurs tworzenia stron/NewReact/ReactMeals/node_modules/istanbul-lib-coverage/lib/coverage-summary.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\n\nfunction blankSummary() {\n    const empty = () => ({\n        total: 0,\n        covered: 0,\n        skipped: 0,\n        pct: 'Unknown'\n    });\n\n    return {\n        lines: empty(),\n        statements: empty(),\n        functions: empty(),\n        branches: empty(),\n        branchesTrue: empty()\n    };\n}\n\n// asserts that a data object \"looks like\" a summary coverage object\nfunction assertValidSummary(obj) {\n    const valid =\n        obj && obj.lines && obj.statements && obj.functions && obj.branches;\n    if (!valid) {\n        throw new Error(\n            'Invalid summary coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n */\nclass CoverageSummary {\n    /**\n     * @constructor\n     * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n     * another coverage summary to initialize this object with.\n     */\n    constructor(obj) {\n        if (!obj) {\n            this.data = blankSummary();\n        } else if (obj instanceof CoverageSummary) {\n            this.data = obj.data;\n        } else {\n            this.data = obj;\n        }\n        assertValidSummary(this.data);\n    }\n\n    /**\n     * merges a second summary coverage object into this one\n     * @param {CoverageSummary} obj - another coverage summary object\n     */\n    merge(obj) {\n        const keys = [\n            'lines',\n            'statements',\n            'branches',\n            'functions',\n            'branchesTrue'\n        ];\n        keys.forEach(key => {\n            if (obj[key]) {\n                this[key].total += obj[key].total;\n                this[key].covered += obj[key].covered;\n                this[key].skipped += obj[key].skipped;\n                this[key].pct = percent(this[key].covered, this[key].total);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * returns a POJO that is JSON serializable. May be used to get the raw\n     * summary object.\n     */\n    toJSON() {\n        return this.data;\n    }\n\n    /**\n     * return true if summary has no lines of code\n     */\n    isEmpty() {\n        return this.lines.total === 0;\n    }\n}\n\ndataProperties(CoverageSummary, [\n    'lines',\n    'statements',\n    'functions',\n    'branches',\n    'branchesTrue'\n]);\n\nmodule.exports = {\n    CoverageSummary\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEnD,SAASE,YAAY,GAAG;EACpB,MAAMC,KAAK,GAAG,OAAO;IACjBC,KAAK,EAAE,CAAC;IACRC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,CAAC;IACVC,GAAG,EAAE;EACT,CAAC,CAAC;EAEF,OAAO;IACHC,KAAK,EAAEL,KAAK,EAAE;IACdM,UAAU,EAAEN,KAAK,EAAE;IACnBO,SAAS,EAAEP,KAAK,EAAE;IAClBQ,QAAQ,EAAER,KAAK,EAAE;IACjBS,YAAY,EAAET,KAAK;EACvB,CAAC;AACL;;AAEA;AACA,SAASU,kBAAkB,CAACC,GAAG,EAAE;EAC7B,MAAMC,KAAK,GACPD,GAAG,IAAIA,GAAG,CAACN,KAAK,IAAIM,GAAG,CAACL,UAAU,IAAIK,GAAG,CAACJ,SAAS,IAAII,GAAG,CAACH,QAAQ;EACvE,IAAI,CAACI,KAAK,EAAE;IACR,MAAM,IAAIC,KAAK,CACX,uDAAuD,GACnDC,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,CACjC;EACL;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EAClB;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACP,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,EAAE;MACN,IAAI,CAACQ,IAAI,GAAGpB,YAAY,EAAE;IAC9B,CAAC,MAAM,IAAIY,GAAG,YAAYM,eAAe,EAAE;MACvC,IAAI,CAACE,IAAI,GAAGR,GAAG,CAACQ,IAAI;IACxB,CAAC,MAAM;MACH,IAAI,CAACA,IAAI,GAAGR,GAAG;IACnB;IACAD,kBAAkB,CAAC,IAAI,CAACS,IAAI,CAAC;EACjC;;EAEA;AACJ;AACA;AACA;EACIC,KAAK,CAACT,GAAG,EAAE;IACP,MAAMI,IAAI,GAAG,CACT,OAAO,EACP,YAAY,EACZ,UAAU,EACV,WAAW,EACX,cAAc,CACjB;IACDA,IAAI,CAACM,OAAO,CAACC,GAAG,IAAI;MAChB,IAAIX,GAAG,CAACW,GAAG,CAAC,EAAE;QACV,IAAI,CAACA,GAAG,CAAC,CAACrB,KAAK,IAAIU,GAAG,CAACW,GAAG,CAAC,CAACrB,KAAK;QACjC,IAAI,CAACqB,GAAG,CAAC,CAACpB,OAAO,IAAIS,GAAG,CAACW,GAAG,CAAC,CAACpB,OAAO;QACrC,IAAI,CAACoB,GAAG,CAAC,CAACnB,OAAO,IAAIQ,GAAG,CAACW,GAAG,CAAC,CAACnB,OAAO;QACrC,IAAI,CAACmB,GAAG,CAAC,CAAClB,GAAG,GAAGR,OAAO,CAAC,IAAI,CAAC0B,GAAG,CAAC,CAACpB,OAAO,EAAE,IAAI,CAACoB,GAAG,CAAC,CAACrB,KAAK,CAAC;MAC/D;IACJ,CAAC,CAAC;IAEF,OAAO,IAAI;EACf;;EAEA;AACJ;AACA;AACA;EACIsB,MAAM,GAAG;IACL,OAAO,IAAI,CAACJ,IAAI;EACpB;;EAEA;AACJ;AACA;EACIK,OAAO,GAAG;IACN,OAAO,IAAI,CAACnB,KAAK,CAACJ,KAAK,KAAK,CAAC;EACjC;AACJ;AAEAH,cAAc,CAACmB,eAAe,EAAE,CAC5B,OAAO,EACP,YAAY,EACZ,WAAW,EACX,UAAU,EACV,cAAc,CACjB,CAAC;AAEFQ,MAAM,CAACC,OAAO,GAAG;EACbT;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}